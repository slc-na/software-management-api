generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Software

model Master {
    id              String           @id @default(uuid())
    name            String
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    roomList        String
    softwareMasters SoftwareMaster[]
}

model SoftwareMaster {
    software   Software @relation(fields: [softwareId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    softwareId String
    master     Master   @relation(fields: [masterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    masterId   String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@id([softwareId, masterId])
}

model Software {
    id              String            @id @default(uuid())
    softwareGroup   SoftwareGroup     @relation(fields: [SoftwareGroupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    SoftwareGroupId String
    name            String
    version         String
    license         String
    currentLicense  String
    installerPath   String
    note            String?
    numberOfLicense Int
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    softwareId      SoftwareMaster[]
    SoftwareMapping SoftwareMapping[]
}

model SoftwareGroup {
    id        String     @id @default(uuid())
    group     Group      @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    groupId   String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    Software  Software[]
}

model Group {
    id             String          @id @default(uuid())
    name           String
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    softwareGroups SoftwareGroup[]
}

// Semester

model Semester {
    id              String            @id @default(uuid())
    name            String
    isActive        Boolean
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    softwareMapping SoftwareMapping[]
}

// Course

model Course {
    id                  String            @id @default(uuid())
    department          Department        @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    departmentId        String
    internetUsageType   InternetUsageType @relation(fields: [internetUsageTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    internetUsageTypeId String
    code                String
    name                String
    createdAt           DateTime          @default(now())
    updatedAt           DateTime          @updatedAt
    softwareMapping     SoftwareMapping[]
}

model Department {
    id        String   @id @default(uuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Course    Course[]
}

model InternetUsageType {
    id        String   @id @default(uuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    courses   Course[]
}

model Room {
    id              String            @id @default(uuid())
    name            String
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    softwareMapping SoftwareMapping[]
}

// Mapping

model SoftwareMapping {
    software   Software @relation(fields: [softwareId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    softwareId String
    course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    courseId   String
    semester   Semester @relation(fields: [semesterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    semesterId String
    room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    roomId     String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([softwareId, courseId, semesterId, roomId])
}
